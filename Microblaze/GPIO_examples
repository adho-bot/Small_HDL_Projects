/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <xparameters.h>
#include "xgpio.h"

// Global GPIO instances
XGpio gpio_led, gpio_btn, gpio_sw;

void driverInit() {
    XGpio_Config *cfg;
    int status;
    
    // Initialize LED GPIO (dual channel)
    cfg = XGpio_LookupConfig(XPAR_GPIO_LED_BASEADDR);
    status = XGpio_CfgInitialize(&gpio_led, cfg, cfg->BaseAddress);
    if (status != XST_SUCCESS) {
        xil_printf("LED GPIO Init Failed\r\n");
        return;
    }
    XGpio_SetDataDirection(&gpio_led, 1, 0x0000); // Channel 1 as output (16-bit LEDs)
    XGpio_SetDataDirection(&gpio_led, 2, 0x00);   // Channel 2 as output (6-bit RGB)
    
    // Initialize Button GPIO
    cfg = XGpio_LookupConfig(XPAR_GPIO_PUSHB_BASEADDR);
    status = XGpio_CfgInitialize(&gpio_btn, cfg, cfg->BaseAddress);
    if (status != XST_SUCCESS) {
        xil_printf("Button GPIO Init Failed\r\n");
        return;
    }
    XGpio_SetDataDirection(&gpio_btn, 1, 0x1F);  // 5 buttons as input (0b11111)
    
    // Initialize Switch GPIO
    cfg = XGpio_LookupConfig(XPAR_GPIO_SW_BASEADDR);
    status = XGpio_CfgInitialize(&gpio_sw, cfg, cfg->BaseAddress);
    if (status != XST_SUCCESS) {
        xil_printf("Switch GPIO Init Failed\r\n");
        return;
    }
    XGpio_SetDataDirection(&gpio_sw, 1, 0xFFFF); // 16 switches as input
    
    xil_printf("All GPIOs initialized successfully!\r\n");
}

int main() {
    int count = 1;

    init_platform();
    xil_printf("Yoo\n\r");
    
    driverInit();
    
    // Main application loop
    while (1) {
        // Read inputs and control outputs
        u32 buttons = XGpio_DiscreteRead(&gpio_btn, 1);
        u32 switches = XGpio_DiscreteRead(&gpio_sw, 1);
        
        // Mirror switches to LEDs and buttons to RGB
        XGpio_DiscreteWrite(&gpio_led, 1, count);
        XGpio_DiscreteWrite(&gpio_led, 2, buttons);
        


        // Small delay
        for (volatile int i = 0; i < 1000000; i++);
        for (volatile int i = 0; i < 1000000; i++);
        for (volatile int i = 0; i < 1000000; i++);

        count <<= 1;
        if(count >= 7000){
            count = 1;
        }

    }
    
    cleanup_platform();
    return 0;
}
